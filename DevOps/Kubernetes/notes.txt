Container Orchestration: Automates process of containers
    -- Large number of containers management issue

    -- Configuration files like YAML or JSON
        Find resources , establish network and store Logs
    -- Deployment scheduling
        Automatically schedules new container deployment
        Finds right host based on predefined settings
    -- Manages Container lifecycle
        System parameters
        File parameters
    -- Scaling and productivity
        Maintain productivity
        Support Scaling

    One of the Orchestration tools : kubernetes

    Kubernetes : Open source system for automating deployment , scaling and 
    management of contarized applications
    
    Concepts:
    -- Pods : Smallest deployable compute objects
    -- Services : Exposes App running on a pod
    -- Storage : Both persistent and temporary
    -- Configuration : Resources for configuring Pods
    -- Security : For cloud native apps enforces security for Pod and API access
    -- Policies : For pods to match with Nodes
    -- Scheduling
    -- Preemtion
    -- Administration

    Points to remember:
    -- Not the traditional Paas 
    -- Not rigid but flexible that supports variety of workloads
    -- Does not provide integration/continuous delivery pipelines
    -- Doesnt prescribe logginh , monitoring , or alerting
    -- Doesnt provide built in middleware or databases 

    Capabilities:
    -- Automatic roll out and rollbacks(Monitoring , changing)
    -- Automatically mounts chosen storage(local , network or public storage)
    -- Scales load automatically based on metrics
    -- Resource utilization and cost saving(Automated bin packing)
    -- Stores , manages and updates sensitive data without rebuilding the images
    -- Assigns both IPv4 and IPv6
    -- Manages workloads and replace failed containers
    -- Self healing and clients only see the healthy containers
    -- Load balances traffic accross Pods
    -- Automatically adds features to cluster without updating source code

    Architecture:
    -- Deployment of kubernetes is known as a cluster
    -- Consist of Control plane which manages with worker Nodes
    -- Control plane made up of controllers , API server , schedulers and etcd
    -- Worker node consist of Pods and pods consist of many containers
    -- Worker nodes are managed by worker plane
    -- Worker plane consist of nodes , Kubelet , container runtime & kubeProxy
    -- Kubelet the most imp part of Worker Nodes
        Communicates with the API
        Ensures that the pods and respective containers are working fine 
        reports to the control plane on pods' health and status
    
    Kubernetes objects:
    -- They are persistent entities (Pods , Deployments , Namespaces , ReplicaSets)
    -- Consist of two files : 
        Object spec : Provided by the user , defines the desired state
        Status : Provided by kubernetes , defines the current state
    -- To work with objects work with kubernetes API directly
    -- Labels : Help identify , group and organize objects
    -- Namespaces provide a way for isolating group of resources for specific teams
    -- Pods : Simplest unit in Kubernetes , represents processes , consist of containers
    -- ReplicaSet helps in managing horizontal scaled running pods
        Defines which pods to acquire
        Generally encapsulated by a Deployment
    -- Deployment provides updates for Pods and ReplicaSets
    
    Advanced topics for objects:
    -- REST Object like pods
    -- Logical abstraction for pods
    -- Provides policies on how to access the pods
    -- Acts as a load balancer
    -- Assigned a unique IP address for accessing apps on Pods

    Ingress : An API object combined with a controller
    -- Provides routing rules to manage multiple users access to services in kubernetes
    -- Exposes application to internet through port 80(HTTP) and 443(HTTPS)
    -- ELB is expensive and is managed outside whereas cluster monitors Ingress
    
    DaemonSet : 
    -- Ensure that Nodes keep a copy of the Pods
    -- Pods are garbage collected when removed from a cluster
    -- If you delete a DaemonSet, all Pods are removed
    -- Ideally used for storage , logs and monitoring nodes

                        Ingress objects       vs          Ingress controllers
Feature 	                Ingress Objects 	        Ingress Controllers
Definition 	API object managing external access to services 	Cluster resource implementing rules specified by Ingress
Primary Function 	Regulates external access routing 	Implements rules, fulfilling the Ingress
Configuration Source 	Rules defined on the Ingress resource 	Reads and processes information from the Ingress object
Traffic Handling 	Manages HTTP and HTTPS routes 	Utilizes load balancer, configures frontends for traffic
Activation 	Active upon configuration with Ingress resource 	Must be explicitly running for Ingress to function
Handling Protocols 	Focused on HTTP and HTTPS 	Implements rules for various protocols and ports
Automatic Startup 	Activated with configuration 	Requires explicit activation in the cluster
Analogy 	Traffic rule set for the cluster 	Executor, similar to Nginx instance handling rules

Kubectl : (The Kubernetes CLI) KubeControl 
-- Helps user deploy applications
-- Inspect & Manage cluster , resources , view logs and more
-- Manage running cluster workloads
-- Key command types : 

    Imperative commands
        Create , update or delete live objects directly
        Operations specified as flags
        Easy to learn: kubectl run nginx --image nginx
        No audit trail which is imp for loggin changes
        Not very flexible(no template or integration)
        Good for deployment and testing

        Limitations:
            if a person executes a code to deploy something and another person
            wants to deploy the exact same thing then that person cannot because
            there is no config file and the exact command needs to be asked
            from the first person

    Imperative object configuration
        This command specifies required operations , optional flags & atleast one file
        Config file must contain a full definition of objects in YAML or JSON
            kubectl create -f nginx.yaml 
        Coinfig templates help relicate identical results

        Adv:
            May be stored in source control system like git
            Can integrate with change processes
            Provides audit trails and templates for creating new objects
        DisAdv:
            Requires basic understanding of the object schema
            Requires writing in YAML/JSON file
            All necessary command operations must be specified

    Declarative object configuration
        Stores configuration data in files
        Operations are identified by kubectl not the user
        Works on directories or individual files
            kubectl apply -f nginx
        Configuratioun files define desired state
        ideal method for production systems

        get command used to list the containers or objects
        apply command is used to create resources using YAML/JSON
        scale command to scale the number of replicas 
        

-- kubectl [commmand] [type] [name] [flags]
    command: any operation (create,get,apply,delete)
    type: resource type (pod , deployment , ReplicaSet)
    name: resource name (if applicable)
    flags: special options or modifiers that override default values